import math


HUMAN = 'O'
AI = 'X'
EMPTY = ' '


board = [EMPTY for _ in range(9)]


def print_board():
    for i in range(3):
        print('|'.join(board[i*3:(i+1)*3]))
        if i < 2:
            print('-----')


def check_winner(board, player):
    win_combos = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # cols
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    return any(all(board[pos] == player for pos in combo) for combo in win_combos)


def is_draw(board):
    return EMPTY not in board


def get_available_moves(board):
    return [i for i in range(9) if board[i] == EMPTY]


def minimax(board, depth, is_maximizing):
    if check_winner(board, AI):
        return 1
    elif check_winner(board, HUMAN):
        return -1
    elif is_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(board):
            board[move] = AI
            score = minimax(board, depth + 1, False)
            board[move] = EMPTY
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(board):
            board[move] = HUMAN
            score = minimax(board, depth + 1, True)
            board[move] = EMPTY
            best_score = min(score, best_score)
        return best_score


def best_move():
    best_score = -math.inf
    move = None
    for i in get_available_moves(board):
        board[i] = AI
        score = minimax(board, 0, False)
        board[i] = EMPTY
        if score > best_score:
            best_score = score
            move = i
    return move


def play():
    print("Welcome to Tic-Tac-Toe!")
    print("You are O, AI is X.")
    print_board()

    while True:
        # Human move
        try:
            human_move = int(input("Enter your move (0-8): "))
            if board[human_move] != EMPTY:
                print("Cell is already occupied! Try again.")
                continue
            board[human_move] = HUMAN
        except (ValueError, IndexError):
            print("Invalid input! Enter a number between 0 and 8.")
            continue

        print_board()
        if check_winner(board, HUMAN):
            print("You win!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

      
        ai_move = best_move()
        board[ai_move] = AI
        print("AI has made its move:")
        print_board()
        if check_winner(board, AI):
            print("AI wins!")
            break
        if is_draw(board):
            print("It's a draw!")
            break


play()



